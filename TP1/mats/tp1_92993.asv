% SVPI
% Alexandre Rodrigues 92993
% Abril 2022
% Trabalho Pratico 1

function NumMec = tp1_92993()
    %% 

    close all
    clear
    clc

    %% Init Vars
    NumMec = 92993;
%     NumSeq = 0;
%     NumImg = 0;
%     tDom = 0;
%     tDice = 0;
%     tCard = 0;
%     RDO = 0;
%     RFO = 0;
%     tDuplas = 0;
%     PntDom = 0;
%     PntDad = 0;
%     CopOuros = 0;
%     EspPaus = 0;
%     Ouros = 0;
%     StringPT = "";


    %% Open Image

%     addpath('../sequencias/Seq160')
%     listaF=dir('../sequencias/Seq160/svpi2022_TP1_img_*.png');

    addpath('../sequencias/Seq530')
    listaF=dir('../sequencias/Seq530/svpi2022_TP1_img_*.png');

    MaxImg = size(listaF,1);
    showplot = false;
%     for idxImg = 1:MaxImg
    idxImg = 1; showplot = true;
        
        tDuplas = 0;
        PntDom = 0;
        PntDad = 0;
%         CopOuros = 0;
%         EspPaus = 0;
%         Ouros = 0;

        imName = listaF(idxImg).name;
        NumSeq = str2double(imName(18:20));
        NumImg = str2double(imName(22:23));

        A = im2double(imread(imName));
%         imshow(A)
    
        %% SubImages (provisorio)
    
        regionsOrig=vs_getsubimages(A); %extract all regions
        regions=vs_getsubimages(A);
        N=numel(regions);
        SS=ceil(sqrt(N));
        
        if showplot
            figure(1)
            for k=1:N 
                subplot( SS, SS, k);
                imshow(regions{k})
                xlabel(k)
            end
        end

        %% Autobin
        domKs = [];
        diceKs = [];
        cardKs = [];
        rodados = [];
        PntCartas = [];
        noiseKs = [];
        ourosk = [];
        copask = [];
        numDomsRoted = 0;
        cartas1k = [];
        cartas2k = [];
        px = 0.15; % 0.14
        py = 0.25; % 0.25
%         perc = 0.15; % 0.15 
        perc0 = 0.1; % 0.1

        copa = getCopaMatrix();
        ouro = strel('diamond',250).Neighborhood;
        tolOuros = 0.12; 
        tolCopas = 0.12;
        means = -ones(N,1);
        meansCopa = -ones(N,1);
        str = "";


        if showplot
            figure(7)
        end

        for k=1:N
            if showplot
                subplot( SS, SS, k);
            end
            regions{k} = medfilt2(filter2(fspecial('average',3),regionsOrig{k}));
%             regions{k} = wiener2(regionsOrig{k},[5 5]);
%             regions{k} = medfilt2(regionsOrig{k});
            
            cut = 5; 
            B = autobin(imadjust(regions{k}(cut:end-cut,cut:end-cut)));
            
            sx = size(B,1);
            sy = size(B,2);

            % Test Noise
            C = bwmorph(B,'erode',2);
            minNNZ =  0.01*nnz(B);
            if nnz(C) < minNNZ
                noiseKs = [noiseKs k];
                if showplot
                    fprintf("nnz=%d, m= %d, noise: %d\n",nnz(C),minNNZ ,k)
                    imshow(B)
                    xlabel("noise")
                end
                continue
            end      
                       
            if sx ~= sy
                rotated = false;
                % rotate to horizontal
                if sx>sy
                    B = rot90(B);
                    regions{k} = rot90(regions{k});
                    rotated = true;
                    sy = size(B,2);
                    sx = size(B,1);
                end

                % Clean Central Vertical Line
                perc = 4/100;
                t1 = 0.5-perc/2;
                t2 = 0.5+perc/2;
                area = round(perc*sy*sx);

                centerB = B(:,round(sy*t1):round(sy*t2));
                [gx,~] = imgradientxy(centerB);
                vertlines = gx>0;

                
                if nnz(vertlines) > 0.3 * area % Dominos
                    B(:,round(sy*t1):round(sy*t2)) = 0; % clean
                    

                    
                    % clean borders               
                    perc = 2/100;
                    B(1:round(sy*perc),:)= 0;
                    B(end-round(sy*perc):end,:)= 0;
                    B(:,1:round(sx*perc))= 0;
%                     B(:,1:round(sx*perc*2))= 0;
                    B(:,end-round(sx*perc*2):end)= 0;


                    % Detect Pintas
                    B = edge(B,'roberts');

%                     B = bwareaopen(B,round(0.5*size(B,1)));
%                     B = bwmorph(B,'close');


%                     B = edging(B);
                

                    [~,Nb] = bwlabel(B);

                    % Pintas de cada lado
                    B1 = B(:,1:round(size(B,2)/2));
                    B2 = B(:,round(size(B,2)/2):end);
                    [~,Nb1] = bwlabel(B1);
                    [~,Nb2] = bwlabel(B2);
                    
                    if (Nb1>6 || Nb2>6 || Nb==0) 
                        noiseKs = [noiseKs k];
                        B = ones(size(B));
                    else
                        if (rotated)
                            numDomsRoted=numDomsRoted+1; 
                        end
                        domKs = [domKs k];
                        if Nb1+Nb2 ~= Nb
                            fprintf("Erro Domino: %d + %d != %d\n",Nb1,Nb2,N);
                        end
                        PntDom = PntDom + Nb1 + Nb2;
                        if Nb1==Nb2 
                            tDuplas = tDuplas + 1;
                        end
                    end
                    
                    if showplot
                        imshow(B)
                        str = sprintf('Dom.%d,N1=%d,N2=%d',k,Nb1,Nb2);
                        xlabel(str);
                    end

                else % cards e NOISE <<<<<
                    cut = round(0.12*size(B,1)); % 0.1
                    B = B(cut:end-cut,:);

%                     B = bwareaopen(B,round(0.4*size(B,1))); % 0.5
%                     B = bwmorph(B,'close');

                    B = edging(B);

                    [L,Nb] = bwlabel(B);
                    if (Nb>9 || Nb==0) 
                        noiseKs = [noiseKs k];
                        B = ones(size(B));
                    else
                        PntCartas = [PntCartas Nb];

                        cardKs = [cardKs k];

                        cut = 2; % 5
                        D = autobin(imadjust(regions{k}(cut:end-cut,cut:end-cut)));
                        
                        
                        perc = 0.15;
                        [res,D] = sepCartas(D,perc,perc0,px,py);
                        tipo = 0;
                        if res == 0
                            fprintf("Carta NA, k=%d\n",k)
                            tipo = 1; %%%%%% <<<<<
                        elseif res ==1
%                             fprintf("Carta 1, k=%d\n",k)
                            cartas1k = [cartas1k k];
                            tipo=1;
                        elseif res == 2
%                             fprintf("Carta 2, k=%d\n",k)
                            cartas2k = [cartas2k k];
                            tipo=2;
                        end
                        restipo = res;

                        if tipo ~=0
                            [res,means(k)] = classNaipe(D,tipo,ouro,px,py,tolOuros);
                            if res
                                ourosk = [ourosk k];
                                str = sprintf("T%d,O:%.2f,C:%.2f\nOuros tp%d",tipo,means(k),meansCopa(k),restipo);
                            else
                                [res,meansCopa(k)] = classNaipe(D,tipo,copa,px,py,tolCopas);
                                if res
                                    copask = [copask k];
                                    str =sprintf("T%d,O:%.2f,C:%.2f\nCopas tp%d",tipo,means(k),meansCopa(k),restipo);
                                else
                                    str = sprintf("T%d,O:%.2f,C:%.2f tp%d",tipo,means(k),meansCopa(k),restipo);
                                end
                            end
                        end



                    end
                    if showplot
%                         imshow(regions{k})
                        imshow(B)
                        xlabel(str)
                    end
                    
                end

            else % Quadrados -> Dados e NOISE <<<<<

                % Perceber se estao a 45ยบ
                c2=2;
                dado1 = autobin(imadjust(regionsOrig{k}(c2+1:end-c2,c2+1:end-c2))); 
                
                % diamond exterior
                A = strel('diamond',floor(size(dado1,1)/2)+2); %+2
                dia = A.Neighborhood;
            
                % diamond interior
                C = strel('diamond',floor(size(dado1,1)/2)-1); %-1
                diamin = C.Neighborhood;
                deltas = round((size(dia,1)-size(diamin,1))/2);
                d2 = zeros(size(dia));
                d2(deltas+1:end-deltas,deltas+1:end-deltas) = diamin;
                
                % zona esperada para a edge
                zona = dia & not(d2);
                area = nnz(zona);
                
                % edges
                [Gmag,~] = imgradient(dado1);
                edges = Gmag>1;
                B = dado1;
            
                if nnz(edges(zona(1:size(edges,1),1:size(edges,1)))) > 0.2 * area %.2
            
                    rodados = [rodados k];
                    
                    % rodar
%                     A = imrotate(dado1,45);
                    A = imrotate(regions{k},45);
            
                    % reduzir imagem ao dado
                    x = size(dado1,1);
                    xmeio = round(size(A,1)/2);

                    l = floor(x/sqrt(2));
                    deltal = round(l/2)-6; % 6
            
%                     B = A(xmeio-deltal:xmeio+deltal,xmeio-deltal:xmeio+deltal);

                    B = autobin(imadjust(double(A(xmeio-deltal:xmeio+deltal,xmeio-deltal:xmeio+deltal))));
                    
                end
%                 cut = 3;
%                 B = autobin(imadjust(double(B(cut+1:end-cut,cut+1:end-cut))));
%                 B = edge(B,'log');
%                 B = edge(B,'roberts');
% %                 B = imdilate(B,ones(3,1));
% %                 B = imdilate(B,ones(1,3));
% 
%                 B = bwareaopen(B,round(0.5*size(B,1)));
%                 B = bwmorph(B,'close');

                B = bwmorph(B,'remove');
                
%                 B = edging(B);

                [~,Nb] = bwlabel(B);
                if (Nb>6 || Nb==0) % NOISE
                    noiseKs = [noiseKs k];
                    if ismember(k,rodados)
                        rodados(rodados==k) = [];
                        fprintf("Removeu rodado %d\n",k)
                    end
                    B = ones(size(B));
                else
                    diceKs = [diceKs k];
                    PntDad = PntDad + Nb;
                end

                if showplot
                    imshow(B)
                    str = sprintf('D.%d,N=%d',k,Nb);
                    xlabel(str);
                end
                
            end

            regions{k} = double(B);
            
            
        end
        

        %% Save Vars
     

        
        PntCartas = sort(PntCartas);

        StringPT = strjoin(string(PntCartas),'');

        tDom = length(domKs);
        RDO = tDom - numDomsRoted; 

        tDice = length(diceKs);
        RFO = tDice - length(rodados);

        tCard = length(cardKs);

        Ouros = length(ourosk);
        Copas = length(copask);
        CopOuros = Ouros + Copas; %+copas

        EspPaus = tCard - CopOuros;

        if showplot
            noiseKs
            domKs
            diceKs
            rodados
            cardKs
            ourosk
            copask
            fprintf("Total=%d, Dominos=%d, Dados=%d, Cartas=%d\n",N,tDom,tDice,tCard)
        end
        

        %% Write Table Entry
        T = table(NumMec, NumSeq, NumImg, tDom, tDice, tCard, RDO, ...
            RFO, tDuplas, PntDom, PntDad, CopOuros, EspPaus, Ouros, StringPT);
%         if idxImg==1
%             writetable(T,'tp1_92993.txt', 'WriteVariableNames',false)
%         else
            writetable(T,'tp1_92993.txt', 'WriteVariableNames',false, 'WriteMode','append')
%         end

%     end

        save


end


function B = edging(A)
    B = A;
%     B = medfilt2(B);
    B = edge(B,'roberts');
    B = bwareaopen(B,round(0.5*size(B,1)));
    B = bwmorph(B,'close');
    
%     B = bwmorph(B,'remove'); % remove
%     B = bwareaopen(B,round(0.2*size(B,1)));
end
function Ibin= autobin(I) 

    Ibin = double(imbinarize(I));
    
    if nnz(Ibin)>0.5*(size(Ibin,1)*size(Ibin,2))
        Ibin = not(Ibin);
    end
end

function [res,B] = sepCartas(B,perc,perc0,px,py)
    
    dx = round(px*size(B,1));
    dy = round(py*size(B,2));
    area = dx*dy;
    nnzSupDir = nnz(B(1:dx,end-dy:end));
    nnzInfDir = nnz(B(end-dx:end,end-dy:end));
    nnzSupEsq = nnz(B(1:dx,1:dy));
    nnzInfEsq = nnz(B(end-dx:end,1:dy));

    if (nnzInfEsq > perc*area && nnzSupDir > perc*area  && ...
            nnzInfDir < perc0*area && nnzSupEsq < perc0*area)
        B(1:dx,1:dy) = 0;
        B(end-dx:end,end-dy:end) = 0;

        res=1;
        
    elseif (nnzInfDir > perc*area && nnzSupEsq > perc*area && ...
            nnzInfEsq < perc0*area && nnzSupDir < perc0*area)
        B(end-dx:end,1:dy) = 0;
        B(1:dx,end-dy:end) = 0;
        
        res = 2;
    else
        res = 0;
    end
end

function copa = getCopaMatrix()
    A = false(501,501);
    idx = 1;
    for x=-250:250
        idy = 1;
        for y = -250:250
            if (x^2 + y^2 - 1e4)^3 < 200*x^2*y^3
                A(end-idy,idx) = true;
            end
            idy = idy + 1;
        end
        idx = idx +1;
    end
    
    copa = A(any(A,2),:);
    copa = copa(:,any(copa,1));
end

function [res,meanC] = classNaipe(carta, tipo,naipe,px,py,tol)
    res = false;
    sc = 10;
    carta = double(carta);
%     clean0s = getNaipe(carta,tipo,px,py);
    clean0s = getNaipe0(carta,tipo,px,py);

    if nnz(clean0s) == 0
        fprintf("clean0s vazio\n")
        meanC = -1;
        res = false;
        return
    end


%     naipe = bwmorph(naipe,'remove'); % usar so a border
%     clean0s = imresize(clean0s,sc);
%     clean0s = bwmorph(clean0s,'remove');
% %     clean0s = bwmorph(clean0s,'dilate');
%     naipe = imdilate(naipe,ones(1,3));
%     meanC = mean(clean0s~=imresize(naipe,size(clean0s)),'all');




    meanC = mean(imresize(clean0s,sc)~=imresize(naipe,sc*size(clean0s)),'all');

    if meanC < tol
        res = true;
    end

end

function res = getNaipe(carta, tipo,px, py)

    B = carta;
    dx = round(px*size(B,1)); % 0.14
    dy = round(py*size(B,2)); % 0.25??
    
    if tipo == 1
        CantoSup = rot90(B(1:dx,end-dy:end));
    elseif tipo == 2
        CantoSup = rot90(rot90(rot90(B(1:dx,1:dy))));
    end

    CSbin = autobin(imadjust(CantoSup));

    dx2 = round(0.55*size(CSbin,1)); 
    res = CSbin(dx2:end,:);

    % clean rows/cols with only one nnz
%     res = res(:,(sum(res,1)-1)>0);
%     res = res((sum(res,2)-1)>0,:);

    res = bwareaopen(res,3);

    % clean corner noise
%     sx = round(0.1*size(res,1));
%     sy = round(0.1*size(res,2));
%     res(1:sx,1:sy) = 0;
%     res(1:sx,end-sy:end) = 0;
%     res(end-sx:end,end-sy:end) = 0;
%     res(end-sx:end,1:sy) = 0;
    

    % clean all zeros rows/cols
    res = res(:,any(res,1));
    res = res(any(res,2),:);
end

function res = getNaipe0(carta, tipo,px, py)

    B = carta;
    dx = round(px*size(B,1)); % 0.14
    dy = round(py*size(B,2)); % 0.25??

    if tipo == 1
        CantoSup = rot90(B(1:dx,end-dy:end));
    elseif tipo == 2
        CantoSup = rot90(rot90(rot90(B(1:dx,1:dy))));
    end

    CSbin = autobin(imadjust(CantoSup));

    dx2 = round(0.55*size(CSbin,1)); 
    res = CSbin(dx2:end,:);

    [~,Nb] = bwlabel(res);

    ola = bwmorph(res,'shrink', inf);
    ppi = filter2([1 1 1; 1 -8 1; 1 1 1], ola);
%     marker = (abs(ppi)==8);
%     acept = 7;
%     while nnz(marker)==0
%         marker = (abs(ppi)>acept);
%         acept = acept - 1;
%     end
    marker = (abs(ppi)>5);
    indexes = find(marker);
    prev = logical(res);
    curArea = 0;

    for i=1:length(indexes)
        mk2 = false(size(marker));
        mk2(indexes(i)) = true;
        temp = imreconstruct(mk2, prev);
        Ar = bwarea(temp);
        if  Ar > curArea
            curArea = Ar;
            res = temp;
        end
    end
    

    % clean all zeros rows/cols
    res = res(:,any(res,1));
    res = res(any(res,2),:);

end

